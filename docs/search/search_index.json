{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The DS2 Software Documentation","text":"<p>To simplify the understanding of DS2 modules and the reference architecture, the modular components of DS2 have been divided into Tiers.</p>"},{"location":"#tier-0-ds2-support-orientated","title":"Tier 0: DS2 Support Orientated","text":"<p>These represent a range of modules that are perceived as cross-cutting to the other tiers and their modules.</p>"},{"location":"#tier-1-ds2-marketplace-and-deployment-orientated","title":"Tier 1: DS2 Marketplace and Deployment orientated","text":"<p>These support the acquisition, porting, and deployment of modules at participants or service intermediaries</p>"},{"location":"#tier-2-ds2-in-data-space-enablement","title":"Tier 2: DS2 In-Data Space Enablement","text":"<p>The modules facilitate consumer -provider participants in sharing their data. The modules are in general used by a single participant only in their local environment but in some cases, there are additional features to be used between data provider and consumer.</p>"},{"location":"#tier-3-ds2-inter-data-space-enablement","title":"Tier 3: DS2 Inter Data Space Enablement","text":"<p>To an extent, the logic for this layer is the reverse of tier 2.  These modules can be allocated to the Tier 2 situation but their added value is much greater in a cross-sector, cross dataspace scenario. </p>"},{"location":"modules/CONT/","title":"Containerisation","text":"Project Links Software GitHub Repository https://github.com/ds2-eu/containerisation Progress GitHub Project https://github.com/orgs/ds2-eu/projects/7"},{"location":"modules/CONT/#general-description","title":"General Description","text":"<p>To allow easy and automated packaging and deployment of modules on the IDT Kubernetes runtime subcomponent environment. The containerisation module leverages on custom Helm Chart descriptors to automatically convert them into full Kubernetes Helm Charts representing the module, based on standard base templates located in the DS2 Portal Marketplace. The Helm Charts are then deployed on the IDT Module. </p> <p>The Containerisation module is a core module to the IDT Broker module that enables deployment of all the DS2 modules in the IDT Broker Kubernetes sub-component. The Containerisation module uses Helm Chart standard base templates describing a DS2 module. Those templates are provisioned by the IDT Broker module and provide the standard for DS2 module deployment in IDT Broker. Base templates are stored in the DS2 Portal Marketplace. Then, when uploading a DS2 module by module developers, to the DS2 Portal Marketplace, a custom Helm Chart descriptor that includes values for those base templates needs to be provided with the module. The Containerisation module will use the descriptor together with the base templates to create the Helm Chart for the DS2 module during deployment time on the IDT Broker.</p> <p>The Containerisation module can work in two different modes:</p> <ul> <li>The standard DS2 working mode: developers upload module Helm Chart descriptor to the DS2 Portal Marketplace. Participants use the IDT Broker Kubernetes UI to deploy the descriptor on the IDT. The Containerisation module is triggered when detecting the deployment of that descriptor, retrieves the base templates from the DS2 Portal Marketplace, creates the full Helm Chart and deploys it on the IDT Kubernetes Runtime sub-component</li> <li>The GitOps way: automatic deployment of the Helm Chart descriptor is triggered by the Source controller sub-component upon detecting a change on the descriptor in the DS2 Portal Marketplace. Then as in the previous mode, the Containerisation module, create the full Helm Chart and deploys it on the IDT. This could be the deployment mode of the DS2 Portal</li> </ul> <p>In both cases, the only difference is how the Helm Chart descriptor is deployed on the IDT either by the participant manually deploying the descriptor, or being automatically deployed by the Source Controller sub-component.</p>"},{"location":"modules/CONT/#architecture","title":"Architecture","text":"<p>The figure below represents the module fit into the DS-DS environment. </p> <p>The figure below represents the actors, internal structure, primary sub-components, primary DS2 module interfaces, and primary other interfaces of the module. </p>"},{"location":"modules/CONT/#component-definition","title":"Component Definition","text":"<p>This module has the following subcomponent and other functions:</p> <ul> <li> <p>ChartController: The ChartController is a Kubernetes controller, following the Kubernetes controller pattern which keeps track of a new Kubernetes custom resource definition - the \u201cHelmChartDescriptor\u201d. When changes are detected on a descriptor, ie. addition, update, the Controller connects to a configured location ie. GitHub repository, to download the corresponding Helm Chart base templates. Then, together with the HelmChartDescriptor, the Chart Controller will create a full Helm Chart describing the module. This Helm Chart will be deployed into the IDT Kubernetes Runtime subcomponent using the Installer component. </p> </li> <li> <p>ChartManager: The ChartManager is mainly used to monitor the Helm Charts and HelmChartDescriptors deployed in the system. It will query the IDT Module\u2019s Kubernetes subcomponent to retrieve current Charts and descriptors. The Chart Manager can also be used to create a HelmChartDescriptor using some input parameters and install it via the Installer component. Once installed, the ChartController will detect the new ChartDescriptor and will convert it to a Chart deploying it back into the IDT Module\u2019s Kubernetes subcomponent. </p> </li> <li> <p>Installer: This is the component responsible for installing Helm Charts and HelmChartDescriptors in the IDT Kubernetes subcomponent. It will receive the corresponding Charts and HelmChartDescriptors and will apply them in the IDT Kubernetes subcomponent. The Installer also takes care of installing new Sources created by the Source Manager component.  </p> </li> <li> <p>Containerisation UI: This is the main module UI that allows users to monitor current existing Charts, ChartDescriptors and Sources in the system. Users will have an overview of what is installed in the system and its current status regarding to those specific resources. The UI can also be used to create, update or delete ChartDescriptors via the ChartManager and Sources via the Source Manager.  </p> </li> <li> <p>GitOps Source Controller: The Source Controller, similar to the ChartController,  is a Kubernetes controller that keeps track of the custom resource definition Source. A Source mainly represents a reference to a repository where ChartDescriptors are stored. The Source Controller monitors the status of the Source and reacts to changes by reflecting those changes in the IDT Kubernetes subcomponent. The Source Controller is an optional subcomponent, and users can just install the ChartDescriptors using the IDT or via Kubernetes standard kubectl. </p> </li> <li> <p>(DS2) GitOps Source Manager: The Source Manager, similar to the ChartManager is mainly used to monitor the Source in the system and is customised to DS2. It can also be used to create, update, and delete new sources that will be installed via the Installer component. As the Source Controller, this is an optional component. </p> </li> <li> <p>Tier 1 Service Stack for Marketplace and deployment and API: The full stack will be implemented as generically described elsewhere in this document. Exceptions: This module runs in the IDT and uses the IDT Kubernetes subcomponent for Chart and ChartDescriptor installations. The DS2 Portal Marketplace component and its repository system is used to store the Chart base templates. Since the DS2 Portal is also a DS2 module, it is deployed and run on the IDT, so Containerisation module can also be used for the DS2 Portal and other intermediary services. </p> </li> </ul>"},{"location":"modules/CONT/#screenshots","title":"Screenshots","text":"<p>The Containerisation UI development has not yet been started, so no screenshots. </p>"},{"location":"modules/CONT/#commercial-information","title":"Commercial Information","text":"Organisation (s) License Nature License ICE Open Source Apache 2.0"},{"location":"modules/CONT/#top-features","title":"Top Features","text":"<ol> <li>Kubernetes Native: The CONT module is a Kubernetes native solution based on open-source system Flux and The GitOps Toolkit</li> <li>Kubernetes Application Deployment Control: Provides control to Kubernetes administrators or SREs over what and how a module or application is deployed on a given Kubernets cluster ie. IDT2. </li> <li>Kubernetes Application Abstraction: The CONT module abstracts developers from the Kubernetes complexity when creating a Kubernetes application, leveraging on a templating system based on Helm Charts and Flux HelmRelease CRD</li> <li>Helm Chart Templates: Ability to create Helm Chart templates for different types of applications</li> <li>Helm Release CRDs Templates: Based on the HelmRelease CRDs from Flux, the CONT module enables the creation of HelmRelease templates that will make use of the Helm Chart Templates</li> <li>Application Management using API: Manage application (module) lifecycle (create, install, uninstall, delet) using the CONT Chart Manager API</li> <li>Containerisation UI: Manage the Containerisation module using a modern web based UI</li> <li>Operator vs Developer View: Access the Containerisation module features with different views depending on the role Operators vs Developer  </li> </ol>"},{"location":"modules/CONT/#how-to-install","title":"How To Install","text":"<p>The Containerisation module will be part of the IDT installation, but a standalone installer is so far provided in order to be able to work with it, which installs Flux Helm and Source Controllers in order to create the Helm Chart from the HelmRelease and Chart templates. </p>"},{"location":"modules/CONT/#requirements","title":"Requirements","text":"<p>The IDT or a Kubernetes cluster is required.</p> <p>Resources:</p>"},{"location":"modules/CONT/#software","title":"Software","text":"<p>Containerisation module so far installs these software utilities and specific tested compatible versions:</p> <ul> <li>Flux Helm Controller (Chart Controller + Installer)</li> <li>Flux Source Controller (Source Controller)</li> <li>Flux Notification Controller (default)</li> </ul> <p>To Be Implemented: * Chart Manager * Source Manager * Containerisation UI</p>"},{"location":"modules/CONT/#summary-of-installation-steps","title":"Summary of installation steps","text":"<ol> <li>Clone the repo</li> <li>Install the Containerisation module<ul> <li>Run the command installflux.sh </li> </ul> </li> </ol>"},{"location":"modules/CONT/#detailed-steps","title":"Detailed steps","text":"<p>Installer is not yet fully ready: To Be Done</p>"},{"location":"modules/CONT/#how-to-use","title":"How To Use","text":"<p>When first set of Helm Chart and HelmRelease Templates are ready: To Be Done</p>"},{"location":"modules/CONT/#other-information","title":"Other Information","text":"<p>No other information at the moment for Containerisation</p>"},{"location":"modules/CONT/#openapi-specification","title":"OpenAPI Specification","text":"<p>To Be Done: No API</p>"},{"location":"modules/CONT/#additional-links","title":"Additional Links","text":"<p>Video https://youtube.com/cont</p> <p>Flux https://fluxcd.io/</p> <p>Containerisation Repository https://github.com/ds2-eu/containerisation (Private Link for Project Members)</p>"},{"location":"modules/DSHARE/","title":"Datashare (DSHARE)","text":"Project Links Software GitHub Repository https://github.com/ds2-eu/dshare.git Progress GitHub Project https://github.com/orgs/ds2-eu/projects/3"},{"location":"modules/DSHARE/#general-description","title":"General Description","text":"<p>Purpose: To provide a user-orientated view of control plane information related to a specific exchange of data to monitor its status and to potentially limit or block it. It will access data through a Data Interceptor component which it shares with the DS2 Data Inspection component (DINS) which operates more at the data level. It can be seen as an In-Dataspace enablement module. Its role is especially important in an Inter-DS environment to provide extra monitoring and control of the data exchanges when partners are less known. Description: The DS2 DSHARE is for it to access control data regarding an exchange via the common Data Interceptor component and an API to the used connector - either within IDT or a specific Dataspace one. It will then log and monitor this information and allow it to be presented in user-friendly form. For short duration one-shot type transactions, this is more of an after-the-event easy-viewer. However, for longer duration transactions (e.g., querying records over a period of time) then it allows the user themselves to monitor the flow and perform control-type actions such as limiting or blocking the transaction.</p>"},{"location":"modules/DSHARE/#architecture","title":"Architecture","text":"<p>The figure below represents the module fit into the DS-DS environment. </p> <p>The figure below represents the actors, internal structure, primary sub-components, primary DS2 module interfaces, and primary other interfaces of the module. </p>"},{"location":"modules/DSHARE/#component-definition","title":"Component Definition","text":"<p>This module has the following subcomponents and other functions (as detailed in Data Share.pdf, pages 3-4): * Data Share Controller     * Data Share Manager: The primary module that onboards control data (from Connector, Interceptor, Trust environment), stores it in the DSC DB, correlates it, and handles triggers for data actions (limit/block).     * Data Share UI: For configuration, visualization of exchange-related data, and control actions (limiting, blocking).     * DSC DB: Stores component data for use by the UI and Data Share Management. * Connector and API: Primarily the connector within IDT; other local connectors will be explored. APIs (existing or extensions) service data to the Data Share Manager. * Tier 1 Service Stack for Marketplace and deployment and API: Generic DS2 stack implementation (Platform not used by DSHARE). * Tier 2: Data Inspector Manager and API: DINS may trigger DSHARE if anomalies suggest blocking data transfers. * Tier 3: Trust Environment and API: Feeds static agreement information to the Data Share Manager for visualization and control decisions. * Data Share Interceptor and API     * Interceptor: Intercepts data/query streams between IDT/Connector and participant's Business Application/Datastores. Interfaces with DSHARE (DSC) and DINS. Capable of receiving block/limit commands. Research ongoing for interception techniques (man-in-the-middle vs. duplicator).     * Interceptor UI: For configuring the Interceptor (I/O). * Participant DB/Application: Represents business applications feeding data to/receiving queries from the connector.</p>"},{"location":"modules/DSHARE/#screenshots","title":"Screenshots","text":""},{"location":"modules/DSHARE/#commercial-information","title":"Commercial Information","text":"<p>Table with the organisation, license nature (Open Source, Commercial ... ) and the license. Replace with the values of your module.</p> Organisation (s) License Nature License ICE Open Source Apache 2.0"},{"location":"modules/DSHARE/#top-features","title":"Top Features","text":"<ul> <li>Consumer analytics: Comprehensive Data Exchange Monitoring, tracking Real-time of data exchanges between a provider and a consumer. The provider of the app can:<ul> <li>Know active contracts of the consumer</li> <li>Know how much data has been exchanged associated to a given contract</li> <li>Granular Control: Ability to monitor, limit, or block data transfers based on defined policies or user intervention.</li> <li>Advanced Analytics: Features weekly data charts, consumption pattern monitoring, and a consumer ranking system.</li> </ul> </li> <li>Assets analytics: DSHARE provides a cockpit to identify most used assets offered by the provider, weekly and monthly consumption trends helpful for identifying inner problems</li> <li>Alerting System: Notifies users or administrators about approaching or exceeded transfer limits. Alerts are also raisen when consumers have problems accessing an asset (insufficient credentials, etc)</li> </ul>"},{"location":"modules/DSHARE/#how-to-install","title":"How To Install","text":"<p>The module is installed as part of the IDT.</p>"},{"location":"modules/DSHARE/#requirements","title":"Requirements","text":"<p>TBC</p>"},{"location":"modules/DSHARE/#software","title":"Software","text":"<ul> <li>Eclipse Dataspace Connector (EDC) - Specify version if applicable.</li> <li>PostgreSQL Database - Specify version if applicable.</li> <li>Java Development Kit (JDK) - Specify version.</li> <li>Apache Maven - Specify version.</li> </ul>"},{"location":"modules/DSHARE/#summary-of-installation-steps","title":"Summary of installation steps","text":"<p>TBC</p>"},{"location":"modules/DSHARE/#detailed-steps","title":"Detailed steps","text":"<p>TBC</p>"},{"location":"modules/DSHARE/#how-to-use","title":"How To Use","text":"<p>Accessing the DSHARE Dashboard: * Navigate to the DSHARE UI URL (e.g., http://:/dshare-ui).  * Analyse consumer data usage: * View real-time data on active transfers. * Analyze weekly data charts for usage trends.  * Data Assets Analytics:  * Alerts Manager:"},{"location":"modules/DSHARE/#other-information","title":"Other Information","text":"<p>No other information at the moment for IDM</p>"},{"location":"modules/DSHARE/#openapi-specification","title":"OpenAPI Specification","text":"<p>TBC</p>"},{"location":"modules/DSHARE/#additional-links","title":"Additional Links","text":"<p>TBC</p>"},{"location":"modules/IDM/","title":"Identity Management Module (IDM)","text":"Project Links Software GitHub Repository https://github.com/ds2-eu/idm.git Progress GitHub Project https://github.com/orgs/ds2-eu/projects/3"},{"location":"modules/IDM/#general-description","title":"General Description","text":"<p>Purpose: The DS2 Identity Module (IDM) is a Foundation module that provides a practical framework for creating, managing, and validating participant and module identities for inter-Dataspace activities. It leverages Verifiable Credentials (VCs) and integrates with technologies like the EDC IdentityHub to ensure secure and trustworthy identity management. The IDM aims to reuse existing identities from different companies and provide robust mechanisms to verify their membership and participation in various dataspaces. Description: The IDM facilitates the secure interaction between dataspaces by managing identities and access rights. Key development efforts have focused on: Verifiable Credentials (VCs): Core to the IDM, VCs allow companies to prove their identity and attributes in a secure and verifiable manner. Wallet Visualisation: Functionality enabling companies to view and manage their VCs. Credential Issuer: DS2 has developed its own credential issuer capable of generating signed VCs for companies, based on dataspace agreements. IDM Portal: A comprehensive web interface (backend and frontend) for managing dataspaces, collaboration agreements, and company registrations within DS2. EDC IdentityHub Integration: Successful integration allows for the hosting and management of VCs. The module supports the registration of dataspaces, the establishment and management of collaboration agreements between them, and the registration of companies as DS2 members, all underpinned by a system of verifiable digital credentials.</p>"},{"location":"modules/IDM/#architecture","title":"Architecture","text":"<p>The figure below represents the module fit into the DS-DS environment. </p> <p>The figure below represents the actors, internal structure, primary sub-components, primary DS2 module interfaces, and primary other interfaces of the module. </p>"},{"location":"modules/IDM/#component-definition","title":"Component Definition","text":"<p>the IDM comprises the following key components: IDM Portal: * Backend: Manages the business logic for dataspace registration, agreement workflows, company registration, and interactions with the credential issuer and wallet functionalities. * Frontend (UIs): Provides user interfaces for:     * Registration of dataspaces in DS2.     * Requesting collaboration and forming agreements between dataspaces.     * Searching for registered dataspaces.     * Accepting or rejecting collaboration agreements.     * Visualizing dataspace policies.     * Registering companies as members of DS2. * DS2 Credentials Issuer:     * An implemented service capable of generating cryptographically signed Verifiable Credentials.     * Issues credentials to companies based on established dataspace agreements and their DS2 membership. * Wallet Visualisation Functionality:     * A user-facing component allowing companies to view and manage their issued Verifiable Credentials.     * Integrated with the EDC IdentityHub for hosting credentials. * EDC IdentityHub Integration Layer:     * Manages the interaction with the EDC IdentityHub, enabling the storage and retrieval of Verifiable Credentials. * Core Identity Logic:     * Underlying mechanisms for verifying membership of companies in their respective dataspaces and managing the lifecycle of identities and credentials within the DS2 ecosystem.</p>"},{"location":"modules/IDM/#screenshots","title":"Screenshots","text":""},{"location":"modules/IDM/#commercial-information","title":"Commercial Information","text":"<p>Table with the organisation, license nature (Open Source, Commercial ... ) and the license. Replace with the values of your module.</p> Organisation (s) License Nature License ICE Open Source Apache 2.0"},{"location":"modules/IDM/#top-features","title":"Top Features","text":"<ul> <li>Verifiable Credential Management: Core functionality for issuing, hosting (via EDC IdentityHub), and visualizing VCs for companies.</li> <li>DS2 Native Credential Issuer: Custom-built service to generate signed credentials based on dataspace agreements.</li> <li>Comprehensive IDM Portal:<ul> <li>Dataspace registration and discovery.</li> <li>Inter-dataspace collaboration agreement management (requests, acceptance/rejection).</li> <li>Visualization of dataspace policies.</li> <li>Company registration for DS2 membership.</li> </ul> </li> <li>EDC IdentityHub Integration: Successfully achieved for robust VC hosting.</li> <li>Wallet Functionality: Allows companies to manage and present their digital credentials.</li> <li>Decentralized Identity Principles: Aligns with modern approaches to identity management, enhancing security and user control.</li> <li>Membership Verification: Mechanisms to verify company membership within specific dataspaces.</li> <li>Secure Inter-Dataspace Communication: Facilitates trust by ensuring participants are authenticated and authorized.</li> </ul>"},{"location":"modules/IDM/#how-to-install","title":"How To Install","text":"<p>The module is installed as part of the IDT.</p>"},{"location":"modules/IDM/#requirements","title":"Requirements","text":"<p>TBC</p>"},{"location":"modules/IDM/#software","title":"Software","text":"<p>TBC</p>"},{"location":"modules/IDM/#summary-of-installation-steps","title":"Summary of installation steps","text":"<p>TBC</p>"},{"location":"modules/IDM/#detailed-steps","title":"Detailed steps","text":"<p>TBC</p>"},{"location":"modules/IDM/#how-to-use","title":"How To Use","text":"<p>The IDM is primarily interacted with via the global portal. After the user logs in it provides two main functionality: Management of Dataspaces and Company Verifiable Credentials: * Dataspace Authorities:     * Use the IDM Portal to register their dataspace within the DS2 ecosystem.          * Search for other registered dataspaces to explore potential collaborations.     * Initiate collaboration requests with other dataspaces.          * Review and accept/reject incoming collaboration requests.          * View policies associated with registered dataspaces.      * Companies:     * Register their organization as a member of DS2 via the IDM Portal.          * Once approved and relevant dataspace agreements are in place, the DS2 Credentials Issuer will generate Verifiable Credentials for the company.     * Access the Wallet Visualisation Functionality to view and manage their issued VCs. These VCs can then be used to prove their identity and membership in inter-dataspace interactions.      *System Administrators:     * Manage the overall configuration and operation of the IDM components.</p>"},{"location":"modules/IDM/#other-information","title":"Other Information","text":"<p>No other information at the moment for IDM</p>"},{"location":"modules/IDM/#openapi-specification","title":"OpenAPI Specification","text":"<p>TBC</p>"},{"location":"modules/IDM/#additional-links","title":"Additional Links","text":"<p>TBC</p>"},{"location":"modules/IDT/","title":"IDT","text":"Project Links Software GitHub Repository https://github.com/ds2-eu/idt.git Progress GitHub Project https://github.com/orgs/ds2-eu/projects/3"},{"location":"modules/IDT/#general-description","title":"General Description","text":"<p>IDT is the core enabler of DS2 who purpose is to be deployed in front of participants data source/spaces and network connected to any other IDT-enabled data source. As such its aim is to run all DS2 modules, including the DS2 Connector, the core module for Inter-Dataspace communication and data transfer, and the Containerisation module for DS2 module deployment. The IDT contains the core Kubernetes runtime to run all containerised modules and a series of additional open-source software for module management.</p> <p>The IDT contains the Kubernetes runtime that is the core service to run all modules in a containerised way. Those modules descriptors are uploaded to the DS2 Portal Marketplace and then, using the IDT Kubernetes UI, are deployed to the Kubernetes runtime. The Containerisation module kicks-in and then converts those module descriptors to full module charts effectively deploying the DS2 modules. The Kubernetes UI, alongside the Management and Monitoring Controller, will be used to manage and monitor all DS modules running on a participants IDT. Additional services will also be run as part of the IDT such as certificate management, ingress network traffic management using traditional ingress controllers with ingress resources to expose modules and eventually transitioning to service mesh and gateway API, storage management and possibly other useful open-source tools. The other key component of the IDT is the DS2 Connector used for Dataspace like communications following current IDSA and Gaia-X standards. An additional IDT UI will be provided for module navigation and Connector management.</p>"},{"location":"modules/IDT/#architecture","title":"Architecture","text":"<p>The figure below represents the module fit into the DS-DS environment. </p> <p>The figure below represents the actors, internal structure, primary sub-components, primary DS2 module interfaces, and primary other interfaces of the module. </p>"},{"location":"modules/IDT/#component-definition","title":"Component Definition","text":"<p>This module has the following subcomponent and other functions:</p> <ul> <li> <p>Kubernetes (Module Runtime): Kubernetes is the leading technology in container orchestration and the choice and key component of the IDT for deployment and integration of the DS2 modules. This is the core IDT subcomponent that runs and orchestrates the DS2 modules and all the other IDT subcomponents, as containers. This is Open-Source software and the current distribution being used is K3s, a lightweight version of Kubernetes easy to install, half the memory, all in a binary, in less than 100 MB among other enhancements. One of the main advantages is the flexibility of installation, since it can be deployed at a participant edge, onPremise, InCloud, etc.</p> </li> <li> <p>Kubernetes UI: The Kubernetes UI is open-source software based on Rancher that allows to deploy and manage Kubernetes in a more user-friendly way both onPremise and InCloud. The Kubernetes UI will provide the management interface for platform administrators and the module deployment interface for participants running the IDT. This interface will be used to deploy the module ChartDescriptors,  configuration files that describe how a module runs on Kubernetes, from the DS2 Portal Marketplace in the IDT. The Containerisation module will then transform the descriptors into full Helm Charts and deploy them to the Kubernetes subcomponent. The Kubernetes UI will also provide the monitoring interface to the IDT Kubernetes subcomponent and the DS2 modules.</p> </li> <li> <p>Management and Monitoring Controller: This is the main interface from the Kubernetes UI to the Kubernetes subcomponent and also for external integrations. The Management and Monitoring Controller is open-source software based on the Kubernetes and Rancher API and the Rancher agents. It is used as the primary interface to the IDT Kubernetes subcomponent for management and deployment of modules. It will also be used as the primary interface for monitoring which will potentially be integrated with the DRM Blockchain module for traceability. In addition, further research on using other modules for monitoring such as Prometheus-Grafana will be conducted for enhanced monitoring.</p> </li> <li> <p>Ingress \u2013 Gateway: The ingress or gateway resource provides the entry point to the IDT Kubernetes subcomponent via the Ingress controller, thus, the IDT network, for all network traffic from external apps, being an external app, any system external to the IDT. It describes how the DS2 modules are exposed outside of the IDT. Initially the modules will use a Kubernetes Ingress resource to expose the modules but further research will be conducted to examine the use of the Gateway API and Service Mesh technology.</p> </li> <li> <p>Ingress Controller \u2013 Service Mesh: Based on Open Source, the Ingress Controller is the Kubernetes controller dealing with Ingress resources, that is, managing the entry point to the IDT and how the DS2 modules are exposed outside of IDT. Further research is expected for replacement of the Ingress Controller with Service Mesh technology and the Kubernetes Gateway API, that adds a transparent layer to provide the IDT with enhanced connectivity, security, control and observability. The use of the Service Mesh could also be a key feature for using more secure communication via mutual TLS protocol (mTLS) in all DS2 communications which provides and additional trust layer. This could also be integrated with the DS2 trust and identity system.</p> </li> <li> <p>Storage Manager: Open-source software to provide the interface between the IDT Kubernetes subcomponent and the physical storage for DS2 stateful modules. This will use Kubernetes native storage technology to allow highly available stateful module deployments in IDT. When data from DS2 modules need to be persisted in a participant backend storage system, the Storage Manager will be used to map current deployment and Kubernetes Persistent Volumes to external storage systems. This is not a storage system or technology for modules\u2026 If DS2 modules need to use storage, the DS2 modules need to provide them by packaging them in their module Chart.</p> </li> <li> <p>CertManager: Based on Open-source software, it provides management of SSL certificates for secure connectivity ie. HTTPS, with verified signed certificates using Let\u2019s Encrypt CertificateAuthority (CA) and configures them for the Ingress or Gateway resource. The CertManager integrates with the Ingress Controller and/or Service Mesh subcomponents and in addition, further research on integration with DS2 Trust system will be explored.</p> </li> <li> <p>DS2 Connector: The DS2 Connector in the IDT is the key element that will allow for DS2 transactions and data exchange, following the IDSA and Gaia-X standards. The Open-source Eclipse EDC Connector (or the Tractus-X extension) will be used to provide interoperability between Dataspaces and secure, trustworthy exchange of data. Following existing Dataspace principles and protocols, the DS2 Connector will use the DS2 Trust system for identity management and will connect to other participants IDT DS2 Connectors in other Dataspaces for data exchange. The Connector will also integrate with the DS2 Catalog or a Dataspace level Metadata Broker for participant and data discovery. </p> </li> <li> <p>Local Identity: This module is optional and it provides local identity, authentication and authorization to access a participant IDT and its modules by the various users types within a company. Based on Open Source Keycloak identity provider software, further research will be done in order to explore the possibility of linking the Local Identity with the DS2 Trust system.</p> </li> <li> <p>Tier 0 Support Service Stack:</p> <ul> <li>DRM and API: For further exploration integration of the monitoring controller with the Blockchain will be considered.</li> </ul> </li> <li> <p>Tier 1 Service Stack for Marketplace and deployment and API: The full stack will be implemented as generically described elsewhere in this document. Exceptions: The IDT uses the DS2 Portal and Marketplace to retrieve the ChartDescriptors of modules and deploy them via the Kubernetes UI. Then the Containerisation module uses the descriptors to deploy the full module Helm Chart. In addition, The DS2 Connector in the IDT integrates with other IDT DS2 Connectors for data exchange.</p> </li> <li> <p>Tier 3 Trust Stack and Catalog and API: The IDT will make use of the relevant parts of the DS2 Trust Stack for certificates in the Ingress Controller \u2013 Service Mesh and identities in the DS2 Connector. The IDT will also connect via the DS2 Connector to the Catalog.</p> </li> <li> <p>External Apps: External Apps refer to any software application external to the IDT and DS2 ecosystem that uses the DS2 Connector in the IDT for any DS2 data transaction. It\u2019s the application that can trigger a data exchange via the Connector, either as a consumer or producer.</p> </li> <li> <p>External Storage Systems: This refers to any external storage system, physical or software defined, that a participant has already in place and where data from the IDT and DS2 ecosystem can be persisted, thus, is mapped via the Storage Manager into the IDT Kubernetes</p> </li> </ul>"},{"location":"modules/IDT/#screenshots","title":"Screenshots","text":""},{"location":"modules/IDT/#commercial-information","title":"Commercial Information","text":"Organisation (s) License Nature License ICE Open Source Apache 2.0"},{"location":"modules/IDT/#top-features","title":"Top Features","text":"<ol> <li>Kubernetes Platform: The IDT provides a Kubernetes based platform for ease of integration and deployment of the modules</li> <li>Flexible Installation Process: The IDT provides a user friendly installation process for easy installation to non-experienced users.    In any case, management of the platform itself, will require some expertise. In addition, it supports different installation modes from on-cloud to on-prem and edge.</li> <li>Management Interface: A Rancher based UI is provided for the Kubernetes cluster management. Management of Kubernetes itself will require some expertise. The Management UI  provides the interface and API for module management : deployment, deletion, upgrade</li> <li>Monitoring of Platfom and Apps: Provides the interface and API to monitor the cluster itself and the modules</li> <li>Seamless Integration with Containerisation Deployment: IDT integrates seamlessly with the Containerisation module for ease of module deployment</li> <li>Networking: Provides secure networking and connectivity among the installed apps and to and from outside the cluster</li> <li>Log management: Ability to retrieve module logs for troubleshooting and debugging</li> <li>Native Storage: Provides Kubernetes native storage for stateful applications</li> <li>IDT Portal: Provides a local version of the DS2 Portal as the entry point to the IDT, single sign on and module navigation </li> <li>DS2 Connector: The IDT incorporates the DS2 Connector for DS2 data exchange</li> </ol>"},{"location":"modules/IDT/#how-to-install","title":"How To Install","text":"<p>The IDT installs a pre-packaged enterprise ready Kubernetes cluster along with some extra features for management and deployment.</p>"},{"location":"modules/IDT/#requirements","title":"Requirements","text":"<p>Provision a Linux VM (Ubuntu 18.04 or 20.04) Resources:</p> <p>Kubernetes Node</p> <ul> <li>Minimum: 2 cpu cores, 4 GB RAM and 10 GB disk capacity.</li> <li>Recommended: 4 cpu cores, 8 GB RAM and 50 GB disk capacity.</li> </ul> <p>These numbers may change since a number of IDT components will be deployed, check specific requirements for specific components.</p>"},{"location":"modules/IDT/#software","title":"Software","text":"<p>IDT installs these software utilities and specific tested compatible versions:</p> <ul> <li>Docker</li> <li>K3s (Kubernetes)</li> <li>Helm</li> <li>Cert-manager</li> <li>Rancher</li> <li>Creates a self signed certificate to use by the ingress controller</li> <li>Nginx Ingress Controller</li> <li>Nginx docker (load balancer - optional)</li> <li>DS2 Connector (to do)</li> <li>Core DS2 modules (to do)</li> </ul>"},{"location":"modules/IDT/#summary-of-installation-steps","title":"Summary of installation steps","text":"<ol> <li>Clone the repo</li> <li>Deploy IDT<ul> <li>Run the command mini-idt.sh nodeip iface as per instructions. This deploys the Kubernetes platform</li> <li>nodeip: the ip of the node</li> <li>iface: the network interface of the node ip</li> </ul> </li> <li>Access Rancher at https://rancher.$nodeip.ds2.sslip.io where $nodeip uses '-' instead of '.' (The domain can be changed if needed)</li> <li>Register the catalog(s)</li> <li>If http access is needed, run patch_nginx.sh</li> <li>Deploy IDT modules from the Rancher UI (Using Containerisation module at a later stage)<ul> <li>Any script required before deploying any component should be in the idt/modules folder</li> <li>Upon deployment of first module import the self-signed certificate in the trusted CA's store</li> </ul> </li> </ol>"},{"location":"modules/IDT/#detailed-steps","title":"Detailed steps","text":"<ul> <li> <p>Clone the repository <pre><code>git clone https://github.com/ds2-eu/idt.git\n</code></pre></p> </li> <li> <p>Navigate to idt folder <pre><code>cd idt\n</code></pre></p> </li> <li> <p>Run idt <pre><code>./idt.sh ip iface\n</code></pre> where ip is the ip of the vm where k3s will be installed and iface is the network interface of the nodeip for instance ./idt.sh 192.168.50.5 enp0s8</p> </li> </ul> <p>The script will install the software utilities in this order:</p> <ul> <li> <p>First, IDT installs Docker</p> </li> <li> <p>Then, k3s Kubernetes cluster is installed. Once installed, the installation process will wait and check for K3s to be up and running. Helm is installed together with K3s and kubectl.</p> </li> <li> <p>Next cert-manager is deployed in order to provide a ssl certificate for Rancher. Process will wait and check that cert-manager is running.</p> </li> <li> <p>Then Rancher is deployed in the cluster. Process will wait and check that Rancher is running.</p> </li> <li> <p>Next, the nginx ingress controller is deployed. Before this, a self signed ssl certificate is created using certmanager. Notice that the domain that is configured in the certificate, is the one to be used as domain for the modules when deployed to IDT which defaults to *.$nodeip.modules.ds2.sslip.io . This domain can be changed.</p> </li> <li> <p>DS2 IDT is now ready.</p> </li> </ul> <p></p> <ul> <li>Access Rancher by accessing the Rancher url in the browser (https://rancher.$nodeip.ds2.sslip.io)</li> <li>Once in the Rancher UI, the admin password is set</li> <li>Then navigate to the workloads in the system project</li> </ul> <p></p> <ul> <li> <p>The nginx ingress controller is by default set to only accept https connections and redirect to https. In order to use http, run the script patch_nginx.sh which will configure nginx ingress controller to accept http (optional). </p> </li> <li> <p>Now that the cluster is up and running, the Rancher UI can be accessed in order to manage the cluster and install modules. </p> </li> </ul>"},{"location":"modules/IDT/#how-to-use","title":"How To Use","text":"<p>Once the IDT has been installed, the Rancher UI along with the IDT Portal (local Portal) and the core modules (to be done) can be accessed.</p>"},{"location":"modules/IDT/#rancher-ui","title":"Rancher UI","text":"<p>The Rancher UI is the main entry point for Kubernetes cluster management and configuration. </p> <ul> <li> <p>Inspect the cluster and check number of nodes, resources, etc       </p> </li> <li> <p>Create a Module Repository: A user can register a module catalog or repository in order to be able to deploy modules from that module repository. A catalog is just a repository, git or helm, where helm charts are stored. In general, users won't need to create any new repository in the IDT since a default DS2 catalog will be created for the organisation pulling from the organisation repository in DS2 intermediary platform.  If needed, in order to create a new repository, navigate to the cluster, apps, repositories, and click on the \"Add Catalog\" button. Fill in the form with the credentials for a private repository and click \"Create\". The Repository is added to Rancher and the modules will be displayed in the Apps view       </p> </li> <li> <p>Module Deployment: modules can be deployed from the registered Repository, but in general this will be done via the Containerisation module. If needed, navigate to Apps, Charts and the list of available charts (apps) is displayed. Select the chart to be deployed, click on Install, select the Namespace and Name for the instance of the chart and select whether to customize the Helm options before install. If customization is selected, fill in the configuration form and or yaml. Click Next then click Install. The application will be deployed to the platform.       </p> </li> <li> <p>Module logs: In order to review the modules logs, navigate to Apps, Installed Apps, and the list of installed modules is displayed. Select the module to be monitored and the list of Kubernees resources of that module are displayed. Select the Deployment and the Pod is displayed. Click on the three dots on the right and select View Logs. The logs of the module are displayed.        </p> </li> <li> <p>Module deletion: modules can be deleted by navigating to Apps, Installed apps and clicking on the three dots on the right and click on Delete. In general, this will be done via the Containerisation module       </p> </li> </ul>"},{"location":"modules/IDT/#idt-portal","title":"IDT Portal","text":"<p>To Be Done</p>"},{"location":"modules/IDT/#connector-ui","title":"Connector UI","text":"<p>To Be Done</p>"},{"location":"modules/IDT/#other-information","title":"Other Information","text":"<p>No other information at the moment for IDT</p>"},{"location":"modules/IDT/#openapi-specification","title":"OpenAPI Specification","text":""},{"location":"modules/IDT/#additional-links","title":"Additional Links","text":"<p>Video https://youtube.com/idt</p> <p>Kubernetes https://v1-26.docs.kubernetes.io/docs/home/</p> <p>Helm https://helm.sh/</p> <p>K3s https://k3s.io/</p> <p>Rancher https://ranchermanager.docs.rancher.com/v2.7/getting-started/quick-start-guides</p> <p>EDC Connector https://eclipse-edc.github.io/</p> <p>Portal Repository https://github.com/ds2-eu/portal (Private Link for Project Members)</p>"},{"location":"modules/Portal/","title":"Portal","text":"Project Links Software GitHub Repository https://github.com/ds2-eu/portal Progress GitHub Project https://github.com/orgs/ds2-eu/projects/11"},{"location":"modules/Portal/#general-description","title":"General Description","text":"<p>To provide a user and developer friendly portal allowing dataspace participants to register and select DS2 modules which can then be packaged into a IDT environment subsequently deployed by participants enabling both In-Data Space and Inter-Data Space operations. As such it includes functionality for developers to include modules, users to find those modules, to trigger the packaging through links with the containerisation module, as well as supporting functionality for dataspace support, dataspace resources, registration and identity management, and administration. It also provides support for the Data Marketplace. </p> <p>The portal will operate in the DS2 cloud hosted by i4RI. Parties interested in DS may register \u2013 this includes participants, dataspace governance/operators, DS2 module developers as well as, potentially, service intermediaries. Developers will provide modules to the portal marketplace which can be selected/purchased by participants. Selected modules will then be  downloaded and installed by and at a participant IDT. All parties involved will be granted unique IDs including DS-Pair IDs where DS\u2019s agree to cooperate. If manpower resources allow ,a subcomponent will also support user-developer and developer-developer interactions as well as additional static resources such as useful materials or links to IDSA etc. The portal will run on the DS2 platform as a central node but in itself will not be involved in any participant-participant process either at the control or data plane levels. It operates at Tier 1, so is not a \u201cmodule\u201d in-itself, even though it will be deployed and run on top of IDT like a module, so participants would not deploy it. However, conceptually it could be run locally. It could be run by any one as an additional service \u2013 for example dataspace operators. Its main interfaces are to the Containerisation module for module description and packaging, IDT for deployment, the Platform where it is both deployed and will interface to some system modules, and the Data Marketplace which uses it for base marketplace functions. </p>"},{"location":"modules/Portal/#architecture","title":"Architecture","text":"<p>The figure below represents the module fit into the DS-DS environment. </p> <p>The figure below represents the actors, internal structure, primary sub-components, primary DS2 module interfaces, and primary other interfaces of the module. </p>"},{"location":"modules/Portal/#component-definition","title":"Component Definition","text":"<p>This module has the following subcomponent and other functions:</p> <ul> <li> <p>Portal Front End: This is the initial web front end entry point seen by any user of the portal, regardless of participant type or if an external party (eg developer). If unregistered, it directs them to the Registration and Management component and if registered a login process follows. Dynamic menus then allow users to navigate to the elements they wish to see and have access for and as such there is an inferred link to all subcomponents with some form of UI. Of particular relevance is the Dashbutton which is a kind-of mini-Portal Front End embedded in all subcomponents and modules including the Portal itself.</p> </li> <li> <p>Registration and Management: This allows the registration of any actor which wishes to take advantage or use DS2. This includes human actors such as user\u2019s requiring IDT/modules and developers through to system actors such as dataspaces. This will be a customised version of ICE\u2019s existing portal registration system. It\u2019s primary link is to the DS2 Identity Manager.</p> </li> <li> <p>Dash button: The Dashbutton is a DS2 library feature used by most modules and is a dynamic shortcut menu to things of most relevance to the user (eg mainly their installed modules). It allows users to quickly get awareness of their personal DS2 environment as well as control it. The Dashbutton dynamic is detailed within the IDT Module. The base functionality of the Dashbutton exists now but needs to be highly customised for the DS2 environment. It relies on embedded HTML vs an API and enables a holistic environment for DS2 in an easy way. It is detailed in the IDT module.</p> </li> <li> <p>Resource Connect: This will have no deep functionality but allows the users to navigate to further web/document/video type resources both within DS2 and externally (eg IDSA). For example, to read more technical details, look up example dataspaces or any other material. This component is an \u201cif-time-allows\u201d option.</p> </li> <li> <p>Developer Connect: This is intended to simplify casual chat-like interaction between users and developers or in fact any set of participants subscribed to DS2. For example, for support or to discuss new ideas. If included it will be based on existing third part components. This component is an \u201cif-time-allows\u201d option.</p> </li> <li> <p>Module Marketplace: Listing, Cart, Purchase: DS2 modules need to be selected from a catalogue of all modules, purchased (which may be for 0 EUR), and licensed which then makes them available to be packaged into IDT. Except for the latter this is classic marketplace functionality and is mainly configuration of ICE\u2019s existing marketplace module. Its primary links are to the Module uploader to populate its shopfront and once a module is \u2019purchased\u2019 the License and Use Manager.</p> </li> <li> <p>Module Uploader: Beneficiaries (or third parties) develop data-orientated DS2 modules which can be put on DS2 Marketplace. A main link is to the DS2 Identity Manager to give unique identities to the module uploaded. This subcomponent ensures all relevant information is provided and packaged in the right way. This includes software, module details (eg price, licenses, description, logo...), and accompanying knowledge (eg How To\u2019s, Videos\u2026). It ensures a module is K8s/Helm compliant so that it can be potentially packaged into IDT. It will be based on ICE Asset upload being customised for the DS2 environment and all modules must confirm to its needs.</p> </li> <li> <p>Payment: Once agreed the product is paid for and both the portal and the developer compensated. An existing payment service (stripe) will be used and a cart-mediator service is used to link to that (strip link is not shown in architecture). This service will also be used by the Data Marketplace</p> </li> <li> <p>License and Use Manager: Following potential purchase from the marketplace the asset is then licensed for use (fixed licenses, subscription etc \u2013 however developer determines) and a Payment is then due. Once licensed it becomes available for the Containerisation and Deployment grouping to either issue a new IDT or to upgrade and existing IDT. The components is based on existing ICE Marketplace technology upgraded for DS2. Other modules can also use the licensing system \u2013 eg the Data Marketplace (TBD). Note that on first use core modules such as containerisation will also be packaged</p> </li> <li> <p>Administration: A UI for Portal (and Platform) administrator to use to configure other elements and functions of the portal based on access credentials.</p> </li> <li> <p>Portal Identity Manager: Provides identities for actors (parties and modules) relevant to the Portal. All DS2 users must have a DS2 ID, as should Dataspaces, and Dataspace Pairs. The Portal Identity Manager will where necessary interface with the DS2 Identity Module (IDM) to validate participant IDs which will run on the DS2 Platform</p> </li> <li> <p>DS2 Containerisation and API: This provides two basic services to the portal: A) Assisting and ensuring a developer uploads a containerisation compliant module. B) Once modules are selected and licensed, they can be packaged and deployed via this module to downloadable/upgradable IDTs</p> </li> <li> <p>DS2 S/W Platform and API: This platform is available to all modules and is the cloud home of the Portal as well as the Portal hosting an administrative interface to configure it</p> </li> <li> <p>DS2 Data Marketplace and API: The cloud base data marketplace may take advantage of some of the portal common administration function \u2013 user management, licensing, payment</p> </li> <li> <p>DS2 IDT Broker: The licensed modules are packaged via DS2 Containerisation and deployed as a bespoke IDT to the participant</p> </li> <li> <p>DS2 Portal Operator: This represents the administrator and operator of the system who use the Administration UI</p> </li> <li> <p>Modules, s/w, details, knowledge: This represents the upload of the module and accompanying information to become an asset in the portal which can be later explored and purchased. The upload is to the Module Uploaders.</p> </li> <li> <p>Developers: Technicians and business partners representing a developed module to be uploaded</p> </li> <li> <p>User: Any participant of any data space, or future potential participant who wishes to explorer/download modules available</p> </li> <li> <p>External Modules: Other modules which could be applicable to show on a users Dashbutton</p> </li> </ul>"},{"location":"modules/Portal/#screenshots","title":"Screenshots","text":"<p>To Be Done </p>"},{"location":"modules/Portal/#commercial-information","title":"Commercial Information","text":"Organisation (s) License Nature License ICE Open Source Apache 2.0"},{"location":"modules/Portal/#top-features","title":"Top Features","text":"<ol> <li>Organisation Registration and Management: The Portal provides the functionality to register an organisation in DS2 and manage its profile</li> <li>User and Role Management: Create additional users and roles to the organisation</li> <li>Main DS2 Entry Point: The Portal is the UI main entry point to DS2</li> <li>DS2 Navigation: Allows seamless navigation between intermediary modules in the DS2 Cloud Platform</li> <li>Global and Local Portal: The Portal has two different views, the Global Portal running as an intermediary service in the DS2 Cloud Platform and the Local Portal which is meant for the IDT as the IDT Portal</li> <li>Dash Button: A web component to be integrated by all modules that provide the interface to the DS2 security and identity system and allows module navigation</li> <li>Developer Access: Generate API Key to use the Portal API for integration</li> <li>Portal Marketplace: The Portal includes a fully featured Marketplace, which could be considered a module on its own, with functionalities to publish and purchase modules, module search, feedback and ratings, flexible license models, secure payment integration, etc.</li> <li>GitHub Backend Storage: The Marketplace feature is backed by GitHub storage, meaning that modules and container images are stored in GitHub</li> <li>Containerisation Integration: The Module creation view of the Containerisation module is integrated into the Portal</li> </ol>"},{"location":"modules/Portal/#how-to-install","title":"How To Install","text":"<p>Even though the Portal (Global Portal) is a DS2 intermediary service, and users don't need to install it, it is packaged as a regular DS2 module and can be installed on top of the IDT, same as the Local Portal. The Marketplace is also installed as an additional module. In addition, the Dash Button is a web component that needs to be integrated in all DS2 module UIs. Details on how to integrate it are explained next.</p>"},{"location":"modules/Portal/#requirements","title":"Requirements","text":"<p>N/A</p>"},{"location":"modules/Portal/#software","title":"Software","text":"<p>N/A</p>"},{"location":"modules/Portal/#summary-of-installation-steps","title":"Summary of installation steps","text":""},{"location":"modules/Portal/#portal_1","title":"Portal","text":""},{"location":"modules/Portal/#marketplace","title":"Marketplace","text":""},{"location":"modules/Portal/#dash-button","title":"Dash Button","text":""},{"location":"modules/Portal/#detailed-steps","title":"Detailed steps","text":""},{"location":"modules/Portal/#portal_2","title":"Portal","text":""},{"location":"modules/Portal/#marketplace_1","title":"Marketplace","text":""},{"location":"modules/Portal/#dash-button_1","title":"Dash Button","text":""},{"location":"modules/Portal/#how-to-use","title":"How To Use","text":"<p>The next sections describe how to use the different components part of the Portal</p>"},{"location":"modules/Portal/#portal_3","title":"Portal","text":"<p>In order to use the Portal, first navigate to the main entry page at https://portal.ds2.icelab.cloud/.  </p> <p>You need to first register your organisation to be able to log in. Click on Create an account and enter the required details. First enter the name of the new organisation and click Next to check whether it already exists or not in the system. </p> <p>Then enter all the details required for the organisation registration and click Register.  </p> <p>After that, organisation is registered. </p> <p>User can now log in with newly created organisation and username. </p> <p>User will receive a verification email upon first login attempt </p> <p>Once logged in there is a guided tour on the different options available that uses can follow. </p> <p>The main Dashboard of the Portal shows the list of default central modules running in the DS2 Cloud Platform ie. IDM, Catalog, Marketplace and Chat at the moment. The list will evolve as new features are added to DS2. </p> <p>In the left navigation bar users can access and edit the profile information. </p> <p>The Dataspaces option which links to the IDM (see IDM documentation). So far this is a link but researching to embedd the functionality inside the Portal.</p> <p>The Users option allows creating new users for this organisation. Click on Add new user and enter the details. </p> <p>In addition, the Portal already includes the DashButton which is described in the DashButton section.</p>"},{"location":"modules/Portal/#marketplace_2","title":"Marketplace","text":"<p>The Marketplace includes two main different views. The first one is the so called Marketplace for users to be able to purchase modules. The second one is the Product License Manager aimed at module developers to be able to publish their modules and monitor sales.</p> <ul> <li> <p>Marketplace </p> </li> <li> <p>Product License Manager</p> </li> </ul>"},{"location":"modules/Portal/#dash-button_2","title":"Dash Button","text":"<p>To Be Done</p>"},{"location":"modules/Portal/#other-information","title":"Other Information","text":"<p>No other information at the moment for Portal</p>"},{"location":"modules/Portal/#openapi-specification","title":"OpenAPI Specification","text":"<p>To Be Done</p>"},{"location":"modules/Portal/#additional-links","title":"Additional Links","text":"<p>Video https://youtube.com/portal</p> <p>Portal Repository https://github.com/ds2-eu/portal (Private Link for Project Members)</p>"}]}